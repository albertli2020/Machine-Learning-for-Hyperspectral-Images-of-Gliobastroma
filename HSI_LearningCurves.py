import numpy as np
import matplotlib.pyplot as plt
from sklearn.metrics import roc_curve, auc

F1_las_3Layer_2D_275B = [
[0.4366, 0.79939, 0.6908, 0.77125, 693.34],
[0.3441, 0.87413, 0.3635, 0.84396, 698.30],
[0.3290, 0.88344, 0.3296, 0.85850, 702.16],
[0.3183, 0.88881, 0.3188, 0.86185, 700.13],
[0.3100, 0.89311, 0.3158, 0.86073, 700.05],
[0.3040, 0.89544, 0.3169, 0.85962, 700.38],
[0.2967, 0.89848, 0.3207, 0.86129, 701.31],
[0.2490, 0.91064, 0.3273, 0.85626, 913.93],
[0.2066, 0.92225, 0.3297, 0.86800, 914.09],
[0.1716, 0.93599, 0.4149, 0.84619, 1232.38],
[0.1509, 0.94485, 0.5775, 0.83389, 1229.61],
[0.1432, 0.94663, 0.5224, 0.84116, 1229.04],
[0.1313, 0.95100, 0.4796, 0.84563, 1229.80],
[0.1196, 0.95482, 0.4565, 0.84787, 1229.78],
[0.1072, 0.96015, 0.3940, 0.85123, 1229.65],
[0.0970, 0.96474, 0.3590, 0.86185, 1887.48],
[0.0880, 0.96817, 0.3543, 0.86633, 1886.63],
[0.0686, 0.97558, 0.2981, 0.88646, 1874.90],
[0.0650, 0.97694, 0.2958, 0.88758, 1887.58],
[0.0636, 0.97678, 0.3196, 0.88031, 1881.45],
[0.0623, 0.97752, 0.3212, 0.87975, 1884.56],
[0.0602, 0.97820, 0.3305, 0.87583, 1875.20],
[0.0590, 0.97872, 0.3157, 0.88422, 1875.33],
[0.0579, 0.97904, 0.3145, 0.88646, 1882.80],
[0.0570, 0.97978, 0.3218, 0.88607, 1919.17] ]

F2_las_3Layer_2D_275B = [
[0.4396, 0.78108, 0.4895, 0.92614, 673.30],
[0.3193, 0.85329, 0.4532, 0.92128, 675.23],
[0.3093, 0.85838, 0.4518, 0.93245, 674.23],
[0.3011, 0.86193, 0.4739, 0.93197, 676.54],
[0.2952, 0.86678, 0.4811, 0.92565, 675.76],
[0.2902, 0.87201, 0.2899, 0.91350, 887.41],
[0.2725, 0.87971, 0.2800, 0.91691, 885.38],
[0.2563, 0.88754, 0.3497, 0.91253, 885.99],
[0.2372, 0.89715, 0.4541, 0.91642, 1193.43],
[0.1869, 0.92018, 0.8074, 0.77356, 1192.67],
[0.1990, 0.91590, 0.6216, 0.78279, 1821.38],
[0.1500, 0.93809, 0.7681, 0.74052, 1825.21],
[0.1332, 0.94589, 0.7238, 0.75607, 1824.46],
[0.1262, 0.94928, 0.7166, 0.76044, 1818.11],
[0.1227, 0.95108, 0.7176, 0.77113, 1825.00],
[0.1188, 0.95202, 0.6682, 0.79154, 1824.71],
[0.1144, 0.95480, 0.6572, 0.80563, 1825.77],
[0.1055, 0.95905, 0.5385, 0.86200, 1819.89],
[0.1036, 0.95982, 0.5397, 0.86297, 1825.88],
[0.1014, 0.96052, 0.5393, 0.86297, 1826.93],
[0.0992, 0.96170, 0.5585, 0.85957, 1820.33],
[0.0974, 0.96213, 0.5562, 0.86151, 1819.77],
[0.0954, 0.96310, 0.5546, 0.86346, 1819.35],
[0.0937, 0.96367, 0.5827, 0.85762, 1820.13],
[0.0918, 0.96404, 0.5851, 0.85631, 1816.09] ]

F3_las_3Layer_2D_275B = [
[0.2451, 0.92947, 0.6600, 0.70011, 682.42],
[0.2309, 0.93145, 0.6758, 0.70687, 682.64],
[0.1882, 0.93375, 0.7871, 0.68038, 682.93],
[0.1689, 0.94062, 0.6589, 0.72097, 683.13],
[0.1634, 0.94191, 0.6234, 0.73618, 690.11],
[0.1628, 0.94282, 0.7096, 0.73055, 885.54],
[0.1442, 0.94829, 0.7031, 0.74013, 880.44],
[0.1425, 0.94810, 0.6305, 0.75366, 882.27],
[0.1359, 0.94991, 0.7085, 0.72040, 883.45],
[0.1370, 0.94826, 0.6031, 0.76155, 883.85],
[0.1163, 0.95814, 0.5311, 0.78692, 1225.84],
[0.1029, 0.96378, 0.5456, 0.79537, 1225.10],
[0.0862, 0.97013, 0.5320, 0.80326, 1224.90],
[0.0800, 0.97155, 0.5093, 0.80214, 1224.42],
[0.0735, 0.97382, 0.4962, 0.80777, 1224.93],
[0.0837, 0.97217, 0.5323, 0.80608, 1872.05],
[0.0675, 0.97654, 0.5205, 0.81285, 1872.19],
[0.0588, 0.97952, 0.5753, 0.81398, 1870.69],
[0.0544, 0.98079, 0.6836, 0.81059, 1871.30],
[0.0499, 0.98273, 0.6704, 0.81398, 1871.29],
[0.0473, 0.98263, 0.7285, 0.81285, 1870.51],
[0.0447, 0.98373, 0.7233, 0.80947, 1870.42],
[0.0422, 0.98454, 0.7303, 0.80383, 1873.23],
[0.0446, 0.98454, 0.7266, 0.81059, 1871.24],
[0.0419, 0.98542, 0.7379, 0.80665, 1872.14] ]

F4_las_3Layer_2D_275B = [
[0.5124, 0.76462, 0.2291, 0.92386, 652.96],
[0.3936, 0.84922, 0.2343, 0.92106, 641.60],
[0.3762, 0.86136, 0.2122, 0.94255, 642.13],
[0.3644, 0.86678, 0.2113, 0.93834, 641.57],
[0.3469, 0.87432, 0.2151, 0.93134, 650.43],
[0.3397, 0.87808, 0.2273, 0.92526, 644.02],
[0.3154, 0.87474, 0.3172, 0.82624, 824.10],
[0.2758, 0.88650, 0.1751, 0.94815, 824.48],
[0.2591, 0.89512, 0.1643, 0.95189, 824.69],
[0.2492, 0.89882, 0.1622, 0.95376, 824.77],
[0.2379, 0.90466, 0.1650, 0.95095, 824.98],
[0.2269, 0.90973, 0.1652, 0.95142, 825.23],
[0.2138, 0.91554, 0.1805, 0.94955, 825.13],
[0.1771, 0.93152, 0.2671, 0.89444, 1139.10],
[0.1533, 0.94047, 0.2705, 0.91312, 1145.01],
[0.1142, 0.95567, 0.2307, 0.94161, 1145.34],
[0.1013, 0.96201, 0.2365, 0.94114, 1138.99],
[0.0926, 0.96497, 0.2400, 0.94301, 1145.71],
[0.1086, 0.96074, 0.2190, 0.94301, 1741.53],
[0.0869, 0.96785, 0.2174, 0.94208, 1741.89],
[0.0780, 0.97060, 0.2221, 0.93787, 1734.12],
[0.0745, 0.97264, 0.2246, 0.93461, 1739.92],
[0.0720, 0.97394, 0.2184, 0.93367, 1734.22],
[0.0697, 0.97398, 0.2329, 0.93134, 1742.91],
[0.0673, 0.97539, 0.2350, 0.92947, 1742.82] ]

F5_las_3Layer_2D_275B = [
[0.3413, 0.84298, 0.8724, 0.71920, 711.45],
[0.2586, 0.89295, 0.9374, 0.70529, 711.30],
[0.2393, 0.90100, 0.9693, 0.71390, 703.80],
[0.2372, 0.90256, 0.9726, 0.71523, 709.76],
[0.2346, 0.90325, 0.9326, 0.73046, 710.35],
[0.2321, 0.90431, 0.8765, 0.74768, 711.38],
[0.2246, 0.90606, 0.5604, 0.77947, 913.41],
[0.2124, 0.91142, 0.5031, 0.78609, 926.02],
[0.2072, 0.91330, 0.4963, 0.79470, 920.82],
[0.2021, 0.91586, 0.4878, 0.80463, 921.13],
[0.1988, 0.91751, 0.5291, 0.79337, 921.06],
[0.1962, 0.91948, 0.5660, 0.78741, 911.01],
[0.1913, 0.92216, 0.6793, 0.81059, 930.13],
[0.1876, 0.92416, 0.8530, 0.83311, 918.33],
[0.1815, 0.92837, 0.6947, 0.83443, 1277.52],
[0.1671, 0.93521, 0.7025, 0.84039, 1271.79],
[0.1444, 0.94632, 0.6775, 0.87748, 1279.17],
[0.1275, 0.95331, 0.6739, 0.87086, 1267.38],
[0.1206, 0.95761, 0.5156, 0.86622, 1940.75],
[0.0972, 0.96445, 0.4967, 0.85629, 1940.78],
[0.0955, 0.96495, 0.4323, 0.88278, 1932.95],
[0.0864, 0.96860, 0.4214, 0.88145, 1933.17],
[0.0780, 0.97153, 0.4107, 0.86953, 1933.09],
[0.0726, 0.97284, 0.4001, 0.88013, 1932.50],
[0.0684, 0.97506, 0.4149, 0.87682, 1932.78] ]

#model_name_str = 

def plot_model_learning_curves(model_name_str):

    if model_name_str == "3Layer_2D_275B":
        # Convert Python lists to NumPy arrays
        F1_las = np.array(F1_las_3Layer_2D_275B)
        F2_las = np.array(F2_las_3Layer_2D_275B)
        F3_las = np.array(F3_las_3Layer_2D_275B)
        F4_las = np.array(F4_las_3Layer_2D_275B)
        F5_las = np.array(F5_las_3Layer_2D_275B)
    else:
        return

    F_folds = [F1_las, F2_las, F3_las, F4_las, F5_las]
    fold_labels = ['F1', 'F2', 'F3', 'F4', 'F5']
    epochs = np.arange(1, 26)  # 25 epochs

    # Create a figure for the plots
    fig, axes = plt.subplots(nrows=2, ncols=5, figsize=(12, 8))  # 5 rows, 2 columns
    # Store handles and labels for the legend
    handles, labels = [], []

    for i, F_las in enumerate(F_folds):
        train_loss = F_las[:, 0]  # Column 1: Training Loss
        train_acc = F_las[:, 1]   # Column 2: Training Accuracy
        val_loss = F_las[:, 2]    # Column 3: Validation Loss
        val_acc = F_las[:, 3]     # Column 4: Validation Accuracy

        # Accuracy Plot
        ax1 = axes[0, i]
        h1, = ax1.plot(epochs, train_acc, label='Train Accuracy', marker='o')
        h2, = ax1.plot(epochs, val_acc, label='Val Accuracy', marker='o')
        ax1.set_xlabel('Epochs')
        ax1.set_ylabel('Accuracy')
        ax1.set_title(f'{fold_labels[i]} - Accuracy Curve')
        #ax1.legend()
        ax1.grid()

        # Loss Plot
        ax2 = axes[1, i]
        h3, = ax2.plot(epochs, train_loss, label='Train Loss', marker='o')
        h4, = ax2.plot(epochs, val_loss, label='Val Loss', marker='o')
        ax2.set_xlabel('Epochs')
        ax2.set_ylabel('Loss')
        ax2.set_title(f'{fold_labels[i]} - Loss Curve')
        #ax2.legend()
        ax2.grid()

         # Store handles for the legend (only once)
        if i == 0:
            handles.extend([h1, h2, h3, h4])
            labels.extend([h1.get_label(), h2.get_label(), h3.get_label(), h4.get_label()])

    # Add a shared legend outside the plots
    fig.legend(handles, labels, loc='lower center', ncol=4, fontsize='large', bbox_to_anchor=(0.5, 0.0))
    fig.canvas.manager.set_window_title(f"{model_name_str}: Train and Validation Learning Curves")

    plt.suptitle(f"{model_name_str} Learning Curves")
    # Adjust layout for better spacing
    plt.tight_layout(rect=[0, 0.05, 1, 1])
    plt.show()

'''
# Compute ROC Curve & AUC
fpr, tpr, _ = roc_curve(y_test, y_pred_probs)
roc_auc = auc(fpr, tpr)

# Plot ROC Curve
plt.figure(figsize=(6, 6))
plt.plot(fpr, tpr, color='blue', label=f'ROC Curve (AUC = {roc_auc:.4f})')
plt.plot([0, 1], [0, 1], color='gray', linestyle='--')  # Diagonal line for reference
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('Receiver Operating Characteristic (ROC) Curve')
plt.legend()
plt.grid()
plt.show()
'''